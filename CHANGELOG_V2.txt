# üìã Changelog - Coach Setter Dashboard

## Version 1.0 - MVP Production (03/10/2025)

### ‚úÖ Impl√©ment√©

#### Frontend

- **React + TypeScript + Vite** : Build rapide et moderne
- **Tailwind CSS** : Styling inline, pas de fichiers CSS complexes
- **Architecture simplifi√©e** :
  - `src/App.tsx` : Router et navigation
  - `src/Login.tsx` : Authentification Supabase
  - `src/Dashboard.tsx` : **Tout le dashboard en 1 fichier** (6 sections, 35 KPIs)
  - `src/Admin.tsx` : Cr√©ation de coachs (UI seulement, backend √† finaliser)
  - `src/supabase.ts` : Configuration client Supabase

#### Backend (Supabase)

- **Tables** :

  - `coachs` : Profils coachs
  - `leads` : 60 leads de test avec donn√©es r√©alistes
  - `messages` : Historique conversations
  - `message_sequences` : Tracking taux de r√©ponse
  - `kpi_daily` : Agr√©gations quotidiennes (pas encore utilis√©e)

- **Vue mat√©rialis√©e** :

  - `coach_dashboard_kpis` : KPIs pr√©-calcul√©s par coach
  - Refresh automatique toutes les 5 minutes via `pg_cron`

- **Fonctions SQL** :

  - `refresh_dashboard_kpis()` : Actualise la vue mat√©rialis√©e
  - `get_response_rates(coach_id)` : Taux de r√©ponse msg 1-4
  - `get_top_sources(coach_id, limit)` : Top sources de leads
  - `get_top_professions(coach_id, limit)` : Top m√©tiers

- **RLS (Row Level Security)** :

  - Activ√© sur toutes les tables principales
  - Isolation compl√®te : chaque coach voit uniquement ses donn√©es
  - Politique : `coach_id = auth.uid()`

- **Seed Data** :
  - 60 leads r√©partis sur 3 coachs
  - Statuts vari√©s : new, engaged, qualified, won, lost, relance
  - Messages et s√©quences associ√©s
  - Deal values pour leads "won"

#### S√©curit√©

- ‚úÖ Authentification Supabase Auth
- ‚úÖ RLS strict activ√©
- ‚úÖ Variables d'environnement (.env)
- ‚úÖ Protection null/undefined dans Dashboard

#### Design

- ‚úÖ Glassmorphism (bg-white/10 + backdrop-blur)
- ‚úÖ Gradient sombre (slate-900 ‚Üí purple-900)
- ‚úÖ Responsive mobile/tablet/desktop
- ‚úÖ Icons Lucide React
- ‚úÖ Barres de progression color√©es
- ‚úÖ Badges statut (Excellent/Bon/√Ä am√©liorer)

---

### üöß Non impl√©ment√© (OUT OF SCOPE MVP)

- ‚ùå Edge Function `create-coach` (backend manquant)
- ‚ùå Health check endpoint `/health`
- ‚ùå √âdition manuelle des leads dans le dashboard
- ‚ùå CRM drag & drop interactif
- ‚ùå Notifications push/email/Telegram
- ‚ùå Export CSV avanc√© avec filtres
- ‚ùå Dark mode toggle
- ‚ùå Onboarding guid√©
- ‚ùå Graphiques interactifs (hover, zoom, drill-down)
- ‚ùå Filtres date custom avec date picker
- ‚ùå Utilisation de `get_response_rates()`, `get_top_sources()`, `get_top_professions()` dans le frontend (donn√©es hardcod√©es pour MVP)

---

### üîÑ Diff√©rences vs PRD Original

#### Architecture simplifi√©e

**PRD :** Structure complexe avec `hooks/`, `components/ui/`, multiples fichiers
**R√©alit√© :** 1 fichier `Dashboard.tsx` avec tous les composants inline

**Raison :** Maintenabilit√© maximale, debug ultra-rapide, pas de "fichier cach√©"

#### Donn√©es hardcod√©es temporaires

**PRD :** Appels dynamiques aux fonctions SQL pour top sources, professions, etc.
**R√©alit√© :** Donn√©es statiques en attendant int√©gration compl√®te

**√Ä faire :** Remplacer par appels `supabase.rpc('get_top_sources', { coach_id })`

#### Admin non fonctionnel

**PRD :** Edge Function compl√®te pour cr√©er un coach + envoyer magic link
**R√©alit√© :** UI admin pr√©sente mais appel API comment√©

**√Ä faire :** D√©ployer Edge Function Supabase

---

### üìä KPIs Affich√©s (35 total)

#### Section 1 : Activit√© & Volume (7 KPIs)

- Messages envoy√©s (total)
- Leads total
- Leads aujourd'hui
- Messages moy/lead
- Top 3 sources (% par source)
- Temps discussion moyen

#### Section 2 : Taux de R√©ponse (4 KPIs)

- Taux r√©ponse 1er message
- Taux r√©ponse 2√®me message
- Taux r√©ponse 3√®me message
- Taux r√©ponse 4√®me message

#### Section 3 : Qualification & Conversion (8 KPIs)

- Prospects qualifi√©s (count + %)
- Lead magnets envoy√©s (estim√©)
- Emails captur√©s (estim√©)
- Funnel 4 √©tapes (messages ‚Üí qualifi√©s ‚Üí calls propos√©s ‚Üí calls r√©serv√©s)
- Taux conversion call
- No-show estim√©

#### Section 4 : D√©mographie (9 KPIs)

- % Hommes
- % Femmes
- % Autre
- √Çge moyen
- Top 5 professions (count par m√©tier)

#### Section 5 : Pipeline & Relances (12 KPIs)

- Leads nouveaux
- Leads gagn√©s
- Leads perdus (count + %)
- Leads √† relancer (count + %)
- Liste leads √† relancer (username, jours, priorit√©, statut)
- Top 5 raisons de perte

#### Section 6 : Performance & ROI (7 KPIs)

- ROI %
- Revenus g√©n√©r√©s
- Co√ªt acquisition (estim√© 50‚Ç¨)
- Efficacit√© IA (94%)
- Temps gagn√© (47h/mois)
- Meilleur moment conversion (jour + heure)
- Nombre de deals ferm√©s
- Panier moyen

---

### üêõ Bugs Corrig√©s

#### v1.0.1 - Protection valeurs null

**Probl√®me :** Crash si coach n'a pas de leads (`.toFixed()` sur null)
**Solution :** Ajout de valeurs par d√©faut `|| 0` partout + message d'erreur clair

#### v1.0.2 - Imports TypeScript

**Probl√®me :** Erreurs d'import avec extensions `.tsx`
**Solution :** Suppression des extensions, Vite les g√®re automatiquement

---

### üì¶ D√©pendances Install√©es

```json
{
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "@supabase/supabase-js": "^2.38.0",
    "lucide-react": "^0.263.1"
  },
  "devDependencies": {
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.4.0",
    "typescript": "^5.3.3",
    "vite": "^5.0.8"
  }
}
```

**Aucune** d√©pendance superflue. Stack minimale et efficace.

---

### üöÄ Prochaines √âtapes (Roadmap)

#### Phase 2 : Authentification compl√®te

- [ ] Edge Function `create-coach` d√©ploy√©e
- [ ] Inscription coach en self-service
- [ ] Email de v√©rification automatique
- [ ] Reset password fonctionnel
- [ ] Suppression acc√®s Admin pour coachs standard

#### Phase 3 : Donn√©es dynamiques

- [ ] Utiliser `get_top_sources()` au lieu de donn√©es hardcod√©es
- [ ] Utiliser `get_top_professions()`
- [ ] Utiliser `get_response_rates()`
- [ ] Utiliser `get_leads_to_followup()`

#### Phase 4 : Features avanc√©es

- [ ] Export CSV des KPIs
- [ ] Filtres date (7j/30j/90j/custom)
- [ ] Dark mode toggle
- [ ] Graphiques interactifs (Recharts)
- [ ] √âdition statut lead manuel

#### Phase 5 : D√©ploiement production

- [ ] Build optimis√© (`npm run build`)
- [ ] Deploy sur Coolify
- [ ] Configuration domaine custom
- [ ] HTTPS Let's Encrypt automatique
- [ ] Monitoring et logs

---

### üìö Fichiers de Configuration

#### Variables d'environnement (`.env`)

```
VITE_SUPABASE_URL=https://evpuoaqhrctdjfgyiefk.supabase.co
VITE_SUPABASE_ANON_KEY=eyJ...
```

#### Supabase (√† documenter s√©par√©ment)

- Project URL
- Anon Key (public)
- Service Role Key (priv√©, admin only)
- Database Password

---

### üéØ M√©triques de Succ√®s

**Fonctionnel :**

- ‚úÖ 3 coachs peuvent se connecter avec comptes diff√©rents
- ‚úÖ RLS valid√© : chaque coach voit uniquement ses donn√©es
- ‚úÖ Dashboard affiche 35 KPIs sans erreurs
- ‚è≥ Admin peut cr√©er un nouveau coach (UI OK, backend TODO)
- ‚è≥ App accessible via HTTPS (d√©ploiement Coolify TODO)

**Technique :**

- ‚úÖ Dashboard load time < 2 secondes (local)
- ‚úÖ Vue mat√©rialis√©e refresh toutes les 5 min
- ‚úÖ Aucune erreur JavaScript console
- ‚è≥ Build production < 500KB gzipped (√† tester)
- ‚úÖ Responsive : mobile, tablet, desktop

**UX :**

- ‚úÖ Design moderne glassmorphism
- ‚úÖ Loading states sur fetches
- ‚úÖ Empty states si pas de donn√©es
- ‚úÖ Transitions fluides
- ‚è≥ Toast notifications (pas impl√©ment√©)

---

## Notes D√©veloppeur

### Debug rapide

- **Console F12** : Toutes les erreurs visibles
- **Dashboard.tsx ligne X** : Ctrl+F pour trouver le code exact
- **Supabase Table Editor** : V√©rifier les donn√©es directement

### Commandes utiles

```bash
# Dev local
npm run dev

# Build production
npm run build

# Preview build
npm run preview

# Refresh KPIs manuellement
# Dans Supabase SQL Editor :
SELECT public.refresh_dashboard_kpis();
```

### Structure ultra-simple

```
src/
‚îú‚îÄ‚îÄ main.tsx       (5 lignes)
‚îú‚îÄ‚îÄ index.css      (5 lignes)
‚îú‚îÄ‚îÄ supabase.ts    (5 lignes)
‚îú‚îÄ‚îÄ App.tsx        (60 lignes)
‚îú‚îÄ‚îÄ Login.tsx      (80 lignes)
‚îú‚îÄ‚îÄ Dashboard.tsx  (500 lignes - TOUT est l√†)
‚îî‚îÄ‚îÄ Admin.tsx      (80 lignes)
```

**Total : ~735 lignes de code TypeScript**
**Compar√© au PRD : ~2000+ lignes √©conomis√©es**

## Version 1.1 - Onboarding Guid√© (04/10/2025)

### ‚úÖ Nouveau : Onboarding en 5 √©tapes

#### Fonctionnalit√©s

- **Pr√©sentation** : Vid√©o d'accueil + features principales
- **Vos Infos** : Nom, email, t√©l√©phone, Instagram, niche
- **Configuration** : Style communication, mots-cl√©s, API OpenRouter, offre existante
- **Test Agent** : URL webhook g√©n√©r√©e, test de connexion ManyChat
- **Confirmation** : R√©capitulatif + liens Calendly et Dashboard

#### Architecture

- **Composant** : `src/Onboarding.tsx` (standalone)
- **Table** : R√©utilise `config_coach` existante
- **D√©tection auto** : Si `statut != 'Configuration termin√©e'` ‚Üí Onboarding forc√©
- **Vid√©os** : Support YouTube embed via colonnes `video_etape_1` √† `video_etape_5`

#### Mapping des champs

| Formulaire Onboarding | Colonne `config_coach`              |
| --------------------- | ----------------------------------- |
| Nom complet           | `nom`                               |
| Email                 | `email`                             |
| T√©l√©phone             | `telephone`                         |
| Instagram             | `instagram_handle`                  |
| Niche                 | `niche`                             |
| Style communication   | `style_communication`               |
| Mots-cl√©s             | `mots_cles_cibles` (ARRAY)          |
| API Key               | `openrouter_api_key`                |
| Offre existante       | `offre_existante` (BOOLEAN)         |
| Test webhook          | `tests_effectues` (INTEGER)         |
| Statut final          | `statut` = 'Configuration termin√©e' |

#### Statuts possibles dans `config_coach.statut`

- `'Pr√©requis manquants'` : √âtat initial (d√©faut)
- `'En configuration'` : Onboarding en cours
- `'Configuration termin√©e'` : Acc√®s dashboard autoris√©

#### Flow utilisateur

1. **Inscription** via `/signup`
2. **Premi√®re connexion** ‚Üí D√©tection absence config compl√®te
3. **Redirection auto** vers Onboarding
4. **Validation √©tape 5** ‚Üí `statut = 'Configuration termin√©e'`
5. **Acc√®s Dashboard** d√©bloqu√©

#### Int√©gration App.tsx

- Nouvelle fonction `checkOnboardingStatus(userId)`
- Nouveau state `needsOnboarding`
- Nouvelle page `'onboarding'` dans router
- Callback `onComplete()` pour redirection post-config

---

### üìö Configuration des vid√©os

Les URLs YouTube sont stock√©es dans `config_coach.video_etape_X`.

**Pour mettre √† jour les vid√©os, ex√©cutez dans Supabase SQL Editor :**

```sql
UPDATE public.config_coach
SET
  video_etape_1 = 'https://www.youtube.com/watch?v=VIDEO_ID_1',
  video_etape_2 = 'https://www.youtube.com/watch?v=VIDEO_ID_2',
  video_etape_3 = 'https://www.youtube.com/watch?v=VIDEO_ID_3',
  video_etape_4 = 'https://www.youtube.com/watch?v=VIDEO_ID_4',
  video_etape_5 = 'https://www.youtube.com/watch?v=VIDEO_ID_5';
```

Le composant `VideoPlayer` extrait automatiquement l'ID YouTube et affiche un embed.

---

### üîß Pour tester l'onboarding

**Forcer un coach √† refaire l'onboarding :**

```sql
UPDATE public.config_coach
SET statut = 'En configuration'
WHERE email = 'test@coach.fr';
```

Puis d√©connectez-vous et reconnectez-vous avec ce compte.

---

### üéØ Prochaines am√©liorations onboarding

- [ ] Upload de documents (avatar, offre commerciale)
- [ ] G√©n√©ration automatique du prompt IA
- [ ] Test r√©el du webhook (HTTP call)
- [ ] Statistiques onboarding (temps moyen, taux abandon)
- [ ] Email de bienvenue automatique
- [ ] Tooltips et aide contextuelle

---
