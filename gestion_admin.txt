# 🔐 Accès Admin

## 🎯 Comment devenir admin ?

Actuellement, le système détecte un admin si l'**email contient le mot "admin"**.

### Méthode 1 : Créer un nouveau compte admin (RECOMMANDÉ)

**Via la page d'inscription :**

1. Allez sur http://localhost:3000
2. Cliquez "Créer un compte"
3. Remplissez avec :
   - **Nom** : Admin Principal
   - **Email** : `admin@coach.fr` ✅ (contient "admin")
   - **Password** : `Admin123456!`
   - **Spécialité** : Administration
4. Créez le compte
5. Connectez-vous

---

### Méthode 2 : Modifier un compte existant

**Dans Supabase SQL Editor :**

```sql
-- Trouver votre coach actuel
SELECT id, name, email FROM coachs WHERE email = 'test@coach.fr';

-- Modifier l'email pour ajouter "admin"
UPDATE coachs 
SET email = 'admin.test@coach.fr'
WHERE email = 'test@coach.fr';

-- Vérifier
SELECT id, name, email FROM coachs WHERE email LIKE '%admin%';
```

Puis **déconnectez-vous et reconnectez-vous** avec le nouvel email.

---

### Méthode 3 : Créer directement dans Supabase

**Supabase Dashboard** > **Authentication** > **Users** > **Add user**

- Email : `admin@coach.fr`
- Password : `Admin123456!`
- ✅ Auto Confirm User

Puis dans **SQL Editor** :

```sql
-- Récupérer l'UUID du user créé
SELECT id, email FROM auth.users WHERE email = 'admin@coach.fr';

-- Créer le coach avec cet UUID
INSERT INTO public.coachs (id, name, email, specialty, created_at)
VALUES (
  'UUID_COPIE_ICI'::uuid,
  'Admin Principal',
  'admin@coach.fr',
  'administration',
  now()
);
```

---

## 🎯 Vérification rapide

Une fois connecté avec un compte "admin", vous devriez voir dans le header :

```
Dashboard | Admin | [Déconnexion]
          ^^^^^^
       Ce bouton apparaît !
```

---

## 🔒 Pour une vraie app production

Je recommande d'ajouter une **colonne `is_admin` boolean** dans la table `coachs` :

```sql
-- Ajouter la colonne
ALTER TABLE public.coachs 
ADD COLUMN is_admin BOOLEAN DEFAULT false;

-- Promouvoir un coach en admin
UPDATE public.coachs 
SET is_admin = true 
WHERE email = 'admin@coach.fr';
```

Puis modifier le code dans `App.tsx` :

```typescript
const checkIfAdmin = async (userId: string) => {
  const { data } = await supabase
    .from('coach_profiles')
    .select('is_admin')
    .eq('id', userId)
    .single()
  
  if (data?.is_admin) {
    setIsAdmin(true)
  }
}
```

---

**Quelle méthode préférez-vous essayer ? Je vous guide ! 🚀**

est ce qu'il ne faut pas creer des sous repertoire ou mieux
organiser le code et l'infra , pour auditer , anlayser , 
debugger ou faire evoluer plus facilement l'appliweb dans son ensemble ?